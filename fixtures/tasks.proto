syntax = "proto3";

import "proto/annotations.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

package api.tasks.v1;

service TasksService {
  // Task Event
  rpc TriggerTask(TriggerTaskRequest) returns (TriggerTaskResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: ["Tasks"]
    };
    option (s12.protobuf.workato.method) = {
      trigger: true
    };
  }

  // List all of the tasks
  rpc ListTasks(ListTasksRequest) returns (ListTasksResponse) {
    option (s12.protobuf.workato.method) = {
      picklist: {
        label: "tasks.name"
        value: "tasks.id"
      }
    };
  }

  // Create a new task
  rpc CreateTask(CreateTaskRequest) returns (CreateTaskResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: ["Public", "Tasks"]
    };

    option (google.api.http) = {
      post: "/v1/tasks"
      body: "*"
    };
  }

  // Get a task by ID
  rpc GetTask(GetTaskRequest) returns (GetTaskResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: ["Public", "Tasks"]
    };

    option (google.api.http) = {
      get: "/v1/tasks/{id}"
    };
  }

  // Get a task by ID (but privately)
  rpc PrivateGetTask(GetTaskRequest) returns (GetTaskResponse) {
    option (google.api.http) = {
      get: "/v1/private/tasks/{id}"
    };
  }

  // Update a task by ID
  rpc UpdateTask(UpdateTaskRequest) returns (UpdateTaskResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: ["Public", "Tasks"]
    };

    option (google.api.http) = {
      put: "/v1/tasks/{id}"
      body: "*"
    };
  }

  // Delete a task by ID
  rpc DeleteTask(DeleteTaskRequest) returns (DeleteTaskResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: ["Public", "Tasks"]
    };

    option (google.api.http) = {
      delete: "/v1/tasks/{id}"
    };
  }

  // Add a comment to a task
  rpc AddComment(AddCommentRequest) returns (AddCommentResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: ["Public", "Task Comments"]
    };

    option (google.api.http) = {
      post: "/v1/tasks/{task_id}/comment"
      body: "*"
    };
  }

  // Update a comment on a task
  rpc UpdateComment(UpdateCommentRequest) returns (UpdateCommentResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: ["Public", "Task Comments"]
    };

    option (google.api.http) = {
      put: "/v1/tasks/{task_id}/comment/{comment_id}"
      body: "*"
    };
  }

  // Custom Action with custom code
  rpc CustomAction(CustomActionRequest) returns (CustomActionResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: ["Public", "Tasks"]
    };
  }
}

message Task {
  // The ID of the task
  string id = 1;
  // The name of the task
  string name = 2;
}

message ListTasksRequest {
}

message ListTasksResponse {
  repeated Task tasks = 1;
}

message GetTaskRequest {
  // The ID of the task
  string id = 1;
}

message GetTaskResponse {
  Task task = 1;
}

message DeleteTaskRequest {
  // The ID of the task
  string id = 1;
}

message DeleteTaskResponse {}

message UpdateTaskRequest {
  // The ID of the task
  string id = 1 [(s12.protobuf.workato.field) = {
    dynamic_picklist: "api.tasks.v1.TasksService/ListTasks"
  }];

  // The name of the task
  string name = 2;
}

message UpdateTaskResponse {}

message CreateTaskRequest {
  // The name of the task
  string name = 1;
}

message CreateTaskResponse {
  // The ID of the task
  string id = 1;
}

message AddCommentRequest {
  // The ID of the task
  string task_id = 1;

  // The comment to add
  string comment = 2;
}

message AddCommentResponse {
  // The ID of the comment
  string comment_id = 1;
}

message UpdateCommentRequest {
  // The ID of the task
  string task_id = 1;

  // The ID comment to update
  string comment_id = 2;

  // The updated comment
  string comment = 3;
}

message UpdateCommentResponse {}

message TriggerTaskRequest {
  enum TriggerEvent {
    // Unspecified Event
    TRIGGER_EVENT_UNSPECIFIED = 0;
    // Task Started
    TRIGGER_EVENT_TASK_CREATED = 1;
    // Task Updated
    TRIGGER_EVENT_TASK_UPDATED = 2;
    // Task Closed
    TRIGGER_EVENT_TASK_CLOSED = 3;
    // Task Deleted
    TRIGGER_EVENT_TASK_DELETED = 4;
  }
  // Trigger event to subscribe to.
  TriggerEvent trigger = 1;
}

message TriggerTaskResponse {
  string webhook_id = 1;
  string task_id = 2;
}

message CustomActionRequest {

}
message CustomActionResponse {

}
