{
  title: "My Workato Connector",

  # API key authentication example. See more examples at https://docs.workato.com/developing-connectors/sdk/guides/authentication.html
  connection: {
    fields: [
      {
        name: 'api_key',
        label: 'API Key',
        optional: false,
        control_type: 'password',
        hint: 'Get your <b>API key</b> <a href="https://app.example.com/account/api-tokens" target="_blank">here</a>.'
      }
    ],

    authorization: {
      type: 'api_key',

      apply: lambda do |connection|
        headers('Authorization': "Bearer #{connection['api_key']}")
      end
    },

    base_uri: lambda do
      "https://api-2.example.com"
    end
  },

  test: lambda do |_connection|
    get('/users/me')
  end,

  object_definitions: {  
    'api.tasks.v1.CreateTaskRequest': {
      fields: lambda do |connection, config_fields, object_definitions|
        definition = [
          {
            name: "name",
            label: "Name",
            type: "string",
            hint: "<p>The name of the task</p>",
            
            
            sticky: true,
            
          },
          {
            name: "sms_confirmation",
            label: "Sms Confirmation",
            type: "boolean",
            convert_input: "boolean_conversion",
            hint: "<p>Should send sms confirmation</p>",
            
            control_type: "checkbox",
            
            sticky: true,
            
          },
          {
            name: "sms_retries",
            label: "Sms Retries",
            type: "integer",
            convert_input: "integer_conversion",
            hint: "<p>Number of SMS retries</p>",
            
            
            sticky: true,
            
          },
        ]
        definition
      end
    },
  
    'api.tasks.v1.CreateTaskResponse': {
      fields: lambda do |connection, config_fields, object_definitions|
        definition = [
          {
            name: "id",
            label: "Id",
            type: "string",
            hint: "<p>The ID of the task</p>",
            
            
            sticky: true,
            
          },
        ]
        definition
      end
    },
  
    'api.tasks.v1.GetTaskRequest': {
      fields: lambda do |connection, config_fields, object_definitions|
        definition = [
          {
            name: "id",
            label: "Id",
            type: "string",
            hint: "<p>The ID of the task</p>",
            
            
            sticky: true,
            
          },
        ]
        definition
      end
    },
  
    'api.tasks.v1.GetTaskResponse': {
      fields: lambda do |connection, config_fields, object_definitions|
        definition = [
          {
            name: "task",
            label: "Task",
            type: "object",
            properties: object_definitions['api.tasks.v1.Task'],
            
            sticky: true,
            
          },
        ]
        definition
      end
    },
  
    'api.tasks.v1.Task': {
      fields: lambda do |connection, config_fields, object_definitions|
        definition = [
          {
            name: "id",
            label: "Id",
            type: "string",
            hint: "<p>The ID of the task</p>",
            
            
            sticky: true,
            
          },
          {
            name: "name",
            label: "Name",
            type: "string",
            hint: "<p>The name of the task</p>",
            
            
            sticky: true,
            
          },
        ]
        definition
      end
    },
  
    'api.tasks.v1.UpdateTaskRequest': {
      fields: lambda do |connection, config_fields, object_definitions|
        definition = [
          {
            name: "id",
            label: "Id",
            type: "string",
            hint: "<p>The ID of the task</p>",
            
            control_type: "select",
            toggle_hint: "Select from list",
            toggle_field:   {
              name: "id",
              label: "Id",
              type: "string",
              hint: "<p>The ID of the task</p>",
              
              toggle_hint: "Use ID",
              
              sticky: true,
              
            },
            pick_list: "dynamic_api_tasks_v1_tasksservice_listtasks",
            sticky: true,
            
          },
          {
            name: "name",
            label: "Name",
            type: "string",
            hint: "<p>The name of the task</p>",
            
            
            sticky: true,
            
          },
        ]
        definition
      end
    },
  
    'api.tasks.v1.UpdateTaskResponse': {
      fields: lambda do |connection, config_fields, object_definitions|
        definition = [
        ]
        definition
      end
    },
  
    'api.tasks.v1.DeleteTaskRequest': {
      fields: lambda do |connection, config_fields, object_definitions|
        definition = [
          {
            name: "id",
            label: "Id",
            type: "string",
            hint: "<p>The ID of the task</p>",
            
            
            sticky: true,
            
          },
        ]
        definition
      end
    },
  
    'api.tasks.v1.DeleteTaskResponse': {
      fields: lambda do |connection, config_fields, object_definitions|
        definition = [
        ]
        definition
      end
    },
  
    'api.tasks.v1.AddCommentRequest': {
      fields: lambda do |connection, config_fields, object_definitions|
        definition = [
          {
            name: "task_id",
            label: "Task Id",
            optional: false,
            type: "string",
            hint: "<p>The ID of the task</p>",
            
            
            sticky: true,
            
          },
          {
            name: "comment",
            label: "Comment",
            type: "string",
            hint: "<p>The comment to add</p>",
            
            
            sticky: true,
            
          },
        ]
        definition
      end
    },
  
    'api.tasks.v1.AddCommentResponse': {
      fields: lambda do |connection, config_fields, object_definitions|
        definition = [
          {
            name: "comment_id",
            label: "Comment Id",
            type: "string",
            hint: "<p>The ID of the comment</p>",
            
            
            sticky: true,
            
          },
        ]
        definition
      end
    },
  
    'api.tasks.v1.UpdateCommentRequest': {
      fields: lambda do |connection, config_fields, object_definitions|
        definition = [
          {
            name: "task_id",
            label: "Task Id",
            type: "string",
            hint: "<p>The ID of the task</p>",
            
            
            sticky: true,
            
          },
          {
            name: "comment_id",
            label: "Comment Id",
            type: "string",
            hint: "<p>The ID comment to update</p>",
            
            
            sticky: true,
            
          },
          {
            name: "comment",
            label: "Comment",
            type: "string",
            hint: "<p>The updated comment</p>",
            
            
            sticky: true,
            
          },
          {
            name: "timezone",
            label: "Timezone",
            type: "string",
            
            control_type: "select",
            toggle_hint: "Select from list",
            toggle_field:   {
              name: "timezone",
              label: "Timezone",
              type: "string",
              
              toggle_hint: "Use ID",
              
              sticky: true,
              
            },
            pick_list: "timezones",
            sticky: true,
            
          },
        ]
        definition
      end
    },
  
    'api.tasks.v1.UpdateCommentResponse': {
      fields: lambda do |connection, config_fields, object_definitions|
        definition = [
        ]
        definition
      end
    },
  
    'api.tasks.v1.CustomActionRequest': {
      fields: lambda do |connection, config_fields, object_definitions|
        definition = [
        ]
        data = get("/data/for_tasks/#{input['custom_field']}")
        data.map ...
      end
    },
  
    'api.tasks.v1.CustomActionResponse': {
      fields: lambda do |connection, config_fields, object_definitions|
        definition = [
        ]
        definition
      end
    },
  
    'api.tasks.v1.TriggerTaskRequest': {
      fields: lambda do |connection, config_fields, object_definitions|
        definition = [
          {
            name: "trigger",
            label: "Trigger",
            type: "string",
            hint: "<p>Trigger event to subscribe to.</p>",
            
            control_type: "select",
            
            pick_list: "enum_api_tasks_v1_triggertaskrequest_triggerevent",
            sticky: true,
            
          },
        ]
        definition
      end
    },
  
    'api.tasks.v1.TriggerTaskResponse': {
      fields: lambda do |connection, config_fields, object_definitions|
        definition = [
          {
            name: "webhook_id",
            label: "Webhook Id",
            type: "string",
            
            
            sticky: true,
            
          },
          {
            name: "task_id",
            label: "Task Id",
            type: "string",
            
            
            sticky: true,
            
          },
        ]
        definition
      end
    },
  
    'api.tasks.v1.UnusedButIncluded': {
      fields: lambda do |connection, config_fields, object_definitions|
        definition = [
          {
            name: "abc",
            label: "Abc",
            type: "string",
            
            
            sticky: true,
            
          },
        ]
        definition
      end
    },
  
  },

  actions: {  
    "action_tasks": {
      title: "Tasks",
      subtitle: "Interact with Tasks in iAuditor",
      description: lambda do |input, picklist_label|
        "<span class='provider'>#{picklist_label['action_name'] || 'Interact with Tasks'}</span> in <span class='provider'>iAuditor</span>"
      end,
      help: lambda do |input, picklist_label|
        case input['action_name']
        when 'api_tasks_v1_tasksservice_createtask'
          {
            body: '<p>Create a new task from the supplied input.</p>
  
  <p>Allows the user to create a new task and this is a really long multiline description.</p>',
            learn_more_url: '',
            learn_more_text: ''
          }
        when 'api_tasks_v1_tasksservice_customaction'
          {
            body: '<p>Custom Action with custom code</p>',
            learn_more_url: '',
            learn_more_text: ''
          }
        when 'api_tasks_v1_tasksservice_deletetask'
          {
            body: '<p>Delete a task by ID</p>',
            learn_more_url: 'https://google.com',
            learn_more_text: 'Check out these docs to learn more'
          }
        when 'api_tasks_v1_tasksservice_gettask'
          {
            body: '<p>This description comes from the OpenAPI tag<br>
  abc<br>
  123</p>',
            learn_more_url: '',
            learn_more_text: ''
          }
        when 'api_tasks_v1_tasksservice_updatetask'
          {
            body: '<p>Update a task by ID<br>
  This hint includes a <a href="https://google.com" target="_blank">link</a></p>',
            learn_more_url: '',
            learn_more_text: ''
          }
        else
          {
            body: 'Tasks allow you to define work to be done an assign it to someone.',
            learn_more_url: 'https://google.com',
            learn_more_text: 'Learn more about tasks'
          }
        end
      end,
      config_fields: [
        {
          name: "action_name",
          label: "Action",
          type: "string",
          
          control_type: "select",
          
          pick_list: "action_name_tasks",
          sticky: true,
          
        },
        {
          name: "custom_field",
          type: "text",
          
          
          sticky: true,
          ngIf: "input['action'] == 'api_tasks_v1_tasksservice_customaction'",
          
        },
      ],
      input_fields: lambda do |object_definitions, connection, config_fields|
        case config_fields['action_name']
        when 'api_tasks_v1_tasksservice_createtask'
          object_definitions['api.tasks.v1.CreateTaskRequest']
        when 'api_tasks_v1_tasksservice_customaction'
          object_definitions['api.tasks.v1.CustomActionRequest']
        when 'api_tasks_v1_tasksservice_deletetask'
          object_definitions['api.tasks.v1.DeleteTaskRequest']
        when 'api_tasks_v1_tasksservice_gettask'
          object_definitions['api.tasks.v1.GetTaskRequest']
        when 'api_tasks_v1_tasksservice_updatetask'
          object_definitions['api.tasks.v1.UpdateTaskRequest']
        end
      end,
      execute: lambda do |connection, input, eis, eos, continue|
        case input['action_name']
        when 'api_tasks_v1_tasksservice_createtask'
          exclude_keys = ["custom_field"]
          body = input.select { |k, v| k != 'action_name' and not exclude_keys.include? k }
          post("/v1/tasks").payload(body)
        when 'api_tasks_v1_tasksservice_customaction'
          exclude_keys = ["custom_field"]
          body = input.select { |k, v| k != 'action_name' and not exclude_keys.include? k }
          # does a thing
        when 'api_tasks_v1_tasksservice_deletetask'
          exclude_keys = ["id","custom_field"]
          body = input.select { |k, v| k != 'action_name' and not exclude_keys.include? k }
          delete("/v1/tasks/#{input['id']}").params(body)
        when 'api_tasks_v1_tasksservice_gettask'
          exclude_keys = ["id","custom_field"]
          body = input.select { |k, v| k != 'action_name' and not exclude_keys.include? k }
          get("/v1/tasks/#{input['id']}").params(body)
        when 'api_tasks_v1_tasksservice_updatetask'
          exclude_keys = ["id","custom_field"]
          body = input.select { |k, v| k != 'action_name' and not exclude_keys.include? k }
          put("/v1/tasks/#{input['id']}").payload(body)
        end
      end,
      output_fields: lambda do |object_definitions, connection, config_fields|
        case config_fields['action_name']
        when 'api_tasks_v1_tasksservice_createtask'
          object_definitions['api.tasks.v1.CreateTaskResponse']
        when 'api_tasks_v1_tasksservice_customaction'
          object_definitions['api.tasks.v1.CustomActionResponse']
        when 'api_tasks_v1_tasksservice_deletetask'
          object_definitions['api.tasks.v1.DeleteTaskResponse']
        when 'api_tasks_v1_tasksservice_gettask'
          object_definitions['api.tasks.v1.GetTaskResponse']
        when 'api_tasks_v1_tasksservice_updatetask'
          object_definitions['api.tasks.v1.UpdateTaskResponse']
        end
      end,
    },
  
    "action_task_comments": {
      title: "Task Comments",
      subtitle: "Interact with Task Comments in iAuditor",
      description: lambda do |input, picklist_label|
        "<span class='provider'>#{picklist_label['action_name'] || 'Interact with Task Comments'}</span> in <span class='provider'>iAuditor</span>"
      end,
      help: lambda do |input, picklist_label|
        case input['action_name']
        when 'api_tasks_v1_tasksservice_addcomment'
          {
            body: '<p>Add a comment to a task</p>',
            learn_more_url: 'https://google.com',
            learn_more_text: ''
          }
        when 'api_tasks_v1_tasksservice_updatecomment'
          {
            body: '<p>Update a comment on a task</p>',
            learn_more_url: '',
            learn_more_text: ''
          }
        else
          {
            body: '',
            learn_more_url: '',
            learn_more_text: ''
          }
        end
      end,
      config_fields: [
        {
          name: "action_name",
          label: "Action",
          type: "string",
          
          control_type: "select",
          
          pick_list: "action_name_task_comments",
          sticky: true,
          
        },
      ],
      input_fields: lambda do |object_definitions, connection, config_fields|
        case config_fields['action_name']
        when 'api_tasks_v1_tasksservice_addcomment'
          object_definitions['api.tasks.v1.AddCommentRequest']
        when 'api_tasks_v1_tasksservice_updatecomment'
          object_definitions['api.tasks.v1.UpdateCommentRequest']
        end
      end,
      execute: lambda do |connection, input, eis, eos, continue|
        case input['action_name']
        when 'api_tasks_v1_tasksservice_addcomment'
          exclude_keys = ["task_id"]
          body = input.select { |k, v| k != 'action_name' and not exclude_keys.include? k }
          post("/v1/tasks/#{input['task_id']}/comment").payload(body)
        when 'api_tasks_v1_tasksservice_updatecomment'
          exclude_keys = ["task_id","comment_id"]
          body = input.select { |k, v| k != 'action_name' and not exclude_keys.include? k }
          put("/v1/tasks/#{input['task_id']}/comment/#{input['comment_id']}").payload(body)
        end
      end,
      output_fields: lambda do |object_definitions, connection, config_fields|
        case config_fields['action_name']
        when 'api_tasks_v1_tasksservice_addcomment'
          object_definitions['api.tasks.v1.AddCommentResponse']
        when 'api_tasks_v1_tasksservice_updatecomment'
          object_definitions['api.tasks.v1.UpdateCommentResponse']
        end
      end,
    },
  
  },

  # Dynamic webhook example. Subscribes and unsubscribes webhooks programmatically
  # see more at https://docs.workato.com/developing-connectors/sdk/guides/building-triggers/dynamic-webhook.html
  triggers: {  
      trigger_tasks: {
         title: 'Task Event',
  
         description: "<span class='provider'>Trigger for Task Event</span>",
  
         input_fields: lambda do |object_definitions|
           object_definitions['api.tasks.v1.TriggerTaskRequest']
         end,
  
         webhook_subscribe: lambda do |webhook_url, connection, input|
           result = post('/webhooks/v1/webhooks')
             .payload(
               url: webhook_url,
               trigger_events: ["#{input['trigger']}"]
             )
           result['webhook']
         end,
  
         webhook_notification: lambda do |input, payload|
           payload
         end,
  
         webhook_unsubscribe: lambda do |webhook|
           delete("/webhooks/v1/webhooks/#{webhook['webhook_id']}")
         end,
  
         dedup: lambda do |event|
           if event.has_key?('workflow_id')
             event['workflow_id'] + '@' + event['event']['date_triggered']
           elsif event.has_key?('webhook_id')
             event['webhook_id'] + '@' + event['event']['date_triggered']
           end
         end,
  
         output_fields: lambda do |object_definitions|
           object_definitions['api.tasks.v1.TriggerTaskResponse']
         end,
      },
  },

  pick_lists: {  
    "dynamic_api_tasks_v1_tasksservice_listtasks": lambda do    
      body = {}
      qparams = call('encode_array_to_query_params', body)
      resp = get("/v1/tasks?#{qparams}")
      resp['tasks'].pluck('name', 'id')
    end,
    "action_name_tasks": lambda do
      [
        ['Create task', 'api_tasks_v1_tasksservice_createtask'],
        ['Get a task', 'api_tasks_v1_tasksservice_gettask'],
        ['Update task', 'api_tasks_v1_tasksservice_updatetask'],
        ['Delete task', 'api_tasks_v1_tasksservice_deletetask'],
        ['Custom action', 'api_tasks_v1_tasksservice_customaction'],
      ]
    end,
    "action_name_task_comments": lambda do
      [
        ['Add comment', 'api_tasks_v1_tasksservice_addcomment'],
        ['Update comment', 'api_tasks_v1_tasksservice_updatecomment'],
      ]
    end,
    "enum_api_tasks_v1_triggertaskrequest_triggerevent": lambda do
      [
        ['Task Started', 'TRIGGER_EVENT_TASK_CREATED'],
        ['Task Updated', 'TRIGGER_EVENT_TASK_UPDATED'],
        ['Task Closed', 'TRIGGER_EVENT_TASK_CLOSED'],
        ['Task Deleted', 'TRIGGER_EVENT_TASK_DELETED'],
      ]
    end,
  },

  # Reusable methods can be called from object_definitions, picklists or actions
  # See more at https://docs.workato.com/developing-connectors/sdk/sdk-reference/methods.html
  methods: {  
    "encode_array_to_query_params": lambda do |val|
      val.each do |key, value|
        if (value.is_a? String) && (value[0] == '[') && (value[-1] == ']')
          val[key] = parse_json(value)
        end
      end
      val.encode_www_form
    end,
    "does_a_thing": lambda do |param_1, param_2|
      param_1 + param_2
    end,
    "does_another_thing": lambda do |param_1, param_2|
      get("/an/api/#{param_1}")
      .body(param_2)
    end,
  }
}
